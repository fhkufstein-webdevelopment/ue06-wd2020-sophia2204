• Welche URL wird aufgerufen wenn Sie versuchen sich anzumelden?
  - http://localhost/webdev-project-viergewinnt/login

• Welche „Method“ wird im Reiter Network angezeigt?
  - GET

• Welche URL wird aufgerufen wenn Sie versuchen sich zu registrieren?
  - wieder /login oder?

• Welche „Method“ wird im Reiter Network angezeigt?
  - POST

• Versuchen Sie einen Nutzer mit dem Namen test zu registrieren – wie ist der Response? (Chrome Entwicklertools: Network -> klick bei Name auf login -> Response)
  - {"result":false,"data":{"errorFields":{"name":"Benutzername ist schon vorhanden!"}}}
  - name: test
      pwd: testpassword
      pwd2: testpassword
      action: register

• Melden Sie sich an:
    o Benutzername: test
    o Passwort: testpassword

• Legen Sie eine Neue Adresse an – wie ist hier die Method? Wie lautet der Name/aufgerufene URL?
   - /api/address
   - POST

• Bearbeiten Sie eine Adresse und klicken Sie auf speichern – wie ist hier die Method? (evtl. Haken bei „Preserve log“ setzen) Wie lautet hier der Name / aufgerufene URL?
   - PUT
   - http://localhost/webdev-project-viergewinnt/api/address/

• Löschen Sie die neu angelegte Adresse – wie ist hier die Method? Wie lautet hier der Name/aufgerufene URL?
  - DELETE
  - http://localhost/webdev-project-viergewinnt/api/address/

• Probieren Sie einmal eine eigene Route anzulegen. Beispielsweise, dass Sieceine zusätzliche url für den Login definieren (z.B. /anmelden) – der LoginController soll aber weiterhin verwendet werden.
  Dies können Sie in der Datei includes/routes.php vornehmen. Rufen Sie anschließend die URL auf.
    - $route['/anmelden'] = array('controller' => 'LoginController', 'uniqueName' => 'login');
    - funktioniert

• Sehen Sie sich mal ein paar Views in dem Ordner includes/views an. Werfen Sie insbesondere einen Blick auf die Datei includes/views/parts/header.php
   - header.php beinhaltet den header mit der Überschrift "Addressverwaltung" und den Button für Login bzw. Logout
   - header.php wird einmal geschrieben und dann in allen anderen views importiert. Somit muss man beim Entwickeln nicht für jede
       Seite einen eigenen Header schreiben, sondern immer auf den gleichen header verweisen.
       Vorteil: bei änderungen muss ich nur die header.php Datei bearbeiten.

• Versuchen Sie nachzuvollziehen wie der View die Daten erhält. Offenbar wird im Controller mittels $this->view->variablenname = "wert“; ein Wert gesetzt.
  Auf diesen kann dann im view selbst mit $this->variablenname zugegriffen werden
   - mit $this werden Variablen vom Controller an das View weitergegeben
   - somit kann das View auf den derzeitigen User oder die vorhandenen Addressen zugreifen.
   - das ist die Basis von einem MVC: Model enthält/holt die Daten, Controller verarbeitet und stellt sie zur Verfügung und View zeigt sie an